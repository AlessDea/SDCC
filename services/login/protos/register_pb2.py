# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: register.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0eregister.proto\x12\x08register\"?\n\nRegRequest\x12\x10\n\x08username\x18\x01 \x01(\t\x12\x10\n\x08password\x18\x02 \x01(\t\x12\r\n\x05\x65mail\x18\x03 \x01(\t\" \n\x08RegReply\x12\x14\n\x0cisRegistered\x18\x01 \x01(\x08\x32\x46\n\x08Register\x12:\n\x0cregistration\x12\x14.register.RegRequest\x1a\x12.register.RegReply\"\x00\x42\'\n\x0e/SDCC/servicesB\rRegisterProtoP\x01\xa2\x02\x03REGb\x06proto3')



_REGREQUEST = DESCRIPTOR.message_types_by_name['RegRequest']
_REGREPLY = DESCRIPTOR.message_types_by_name['RegReply']
RegRequest = _reflection.GeneratedProtocolMessageType('RegRequest', (_message.Message,), {
  'DESCRIPTOR' : _REGREQUEST,
  '__module__' : 'register_pb2'
  # @@protoc_insertion_point(class_scope:register.RegRequest)
  })
_sym_db.RegisterMessage(RegRequest)

RegReply = _reflection.GeneratedProtocolMessageType('RegReply', (_message.Message,), {
  'DESCRIPTOR' : _REGREPLY,
  '__module__' : 'register_pb2'
  # @@protoc_insertion_point(class_scope:register.RegReply)
  })
_sym_db.RegisterMessage(RegReply)

_REGISTER = DESCRIPTOR.services_by_name['Register']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\016/SDCC/servicesB\rRegisterProtoP\001\242\002\003REG'
  _REGREQUEST._serialized_start=28
  _REGREQUEST._serialized_end=91
  _REGREPLY._serialized_start=93
  _REGREPLY._serialized_end=125
  _REGISTER._serialized_start=127
  _REGISTER._serialized_end=197
# @@protoc_insertion_point(module_scope)
