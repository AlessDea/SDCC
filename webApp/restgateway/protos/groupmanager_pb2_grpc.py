# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protos.groupmanager_pb2 as groupmanager__pb2


class GroupManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.groupCreate = channel.unary_unary(
                '/groupmanager.GroupManager/groupCreate',
                request_serializer=groupmanager__pb2.GroupCreateRequest.SerializeToString,
                response_deserializer=groupmanager__pb2.GroupCreateReply.FromString,
                )
        self.groupList = channel.unary_unary(
                '/groupmanager.GroupManager/groupList',
                request_serializer=groupmanager__pb2.GroupListRequest.SerializeToString,
                response_deserializer=groupmanager__pb2.GroupListReply.FromString,
                )
        self.checkGroup = channel.unary_unary(
                '/groupmanager.GroupManager/checkGroup',
                request_serializer=groupmanager__pb2.CheckGroupRequest.SerializeToString,
                response_deserializer=groupmanager__pb2.CheckGroupResponse.FromString,
                )


class GroupManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def groupCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def groupList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'groupCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.groupCreate,
                    request_deserializer=groupmanager__pb2.GroupCreateRequest.FromString,
                    response_serializer=groupmanager__pb2.GroupCreateReply.SerializeToString,
            ),
            'groupList': grpc.unary_unary_rpc_method_handler(
                    servicer.groupList,
                    request_deserializer=groupmanager__pb2.GroupListRequest.FromString,
                    response_serializer=groupmanager__pb2.GroupListReply.SerializeToString,
            ),
            'checkGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.checkGroup,
                    request_deserializer=groupmanager__pb2.CheckGroupRequest.FromString,
                    response_serializer=groupmanager__pb2.CheckGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'groupmanager.GroupManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GroupManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def groupCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/groupmanager.GroupManager/groupCreate',
            groupmanager__pb2.GroupCreateRequest.SerializeToString,
            groupmanager__pb2.GroupCreateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def groupList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/groupmanager.GroupManager/groupList',
            groupmanager__pb2.GroupListRequest.SerializeToString,
            groupmanager__pb2.GroupListReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/groupmanager.GroupManager/checkGroup',
            groupmanager__pb2.CheckGroupRequest.SerializeToString,
            groupmanager__pb2.CheckGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
